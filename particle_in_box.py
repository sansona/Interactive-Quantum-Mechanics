import numpy as np

from bokeh.layouts import row, widgetbox
from bokeh.models import CustomJS, Slider
from bokeh.plotting import figure, output_file, show, ColumnDataSource


# -----------------------------------------------------------------------------


def generate_wavedata(L=1):
    '''
    generates dictionaries for energy level, wavefunction, and probability
    densities for  all [0, L]

    Data feeds into generate_n_callback
    '''
    x = np.linspace(0, L, 1000)
    # initialize E to small initial energy to show n**2 behavior
    E = np.ones(1000)*0.001

    phi = np.sqrt(2/L)*np.sin((np.pi*x)/L)
    prob_density = phi**2

    E_source = ColumnDataSource(data=dict(x=x, y=E))
    phi_source = ColumnDataSource(data=dict(x=x, y=phi))
    prob_source = ColumnDataSource(data=dict(x=x, y=prob_density))
    return E_source, phi_source, prob_source


# -----------------------------------------------------------------------------


def generate_waveplot(E_col, phi_col, prob_col, size=750):
    '''
    generates initial plot with starting values of E, phi, & probability density. generate_n_callback updates this plot 
    '''
    plot = figure(y_range=(-3, 3), plot_width=size, plot_height=size)
    plot.xaxis.axis_label = 'x'
    plot.xaxis.axis_label_text_font_size = '24pt'
    plot.line('x', 'y', source=E_col, line_width=6,
              color='olive', line_alpha=0.6, legend='E')
    plot.line('x', 'y', source=phi_col, line_width=6,
              line_alpha=0.6, legend='Phi')
    plot.line('x', 'y', source=prob_col,
              color='red', line_width=6, line_alpha=0.6,
              legend='Probability density')
    plot.legend.location = 'top_left'
    plot.legend.click_policy = 'hide'

    return plot

# -----------------------------------------------------------------------------


def generate_n_callback(phi_col, prob_col, E_col):
    '''
    establish conditions for updating plot generated by generate_waveplot. Initializes slider for n 
    '''
    n_callback = CustomJS(args=dict(
        source=phi_col, source2=prob_col, source3=E_col),
        code="""
        var data = source.data;
        var n = cb_obj.value
        var L = 1
        var x = data['x']
        var phi = data['y']
        for (var i = 0; i < x.length; i++) {
            phi[i] = Math.sqrt(2/L)*Math.sin((n*Math.PI*x[i])/L);
        }
        var data2 = source2.data
        var prob = data2['y']
        for (var i = 0; i < x.length; i++) {
            prob[i] = Math.pow(Math.sqrt(2/L)*Math.sin((n*Math.PI*x[i])/L), 2);
        }
        var data3 = source3.data
        var E = data3['y']
        for (var i = 0; i < x.length; i++) {
            E[i] = 0.1*Math.pow(n, 2);    
        }
        source.change.emit();
    """)

    slider = Slider(start=1, end=100, value=1, step=1,
                    title='n', callback=n_callback)

    return slider

# -----------------------------------------------------------------------------


if __name__ == '__main__':
    E_wave, phi_wave, prob_wave = generate_wavedata()

    wave_plot = generate_waveplot(E_wave, phi_wave, prob_wave)

    n_slider = generate_n_callback(phi_wave, prob_wave, E_wave)
    layout = row(wave_plot, widgetbox(n_slider))
    show(layout)
